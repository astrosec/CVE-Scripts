import os
import re

def get_software_list() -> list:

    def parse_info(fpath):
        try:
            import pywintypes
            import win32api
            lang, codepage = win32api.GetFileVersionInfo(fpath, '\\VarFileInfo\\Translation')[0]

            str_product_path = u'\\StringFileInfo\\%04X%04X\\%s' % (lang, codepage, 'ProductName')
            str_version_path = u'\\StringFileInfo\\%04X%04X\\%s' % (lang, codepage, 'FileVersion')

            product_part = win32api.GetFileVersionInfo(fpath, str_product_path)
            version_part = win32api.GetFileVersionInfo(fpath, str_version_path)

            if product_part is None or version_part is None:
                return None
            
            return (product_part, version_part)
        except pywintypes.error: # Hits if the file doesn't have a resources section, ie no info to get
            return None
        
    def format(parts: tuple) -> tuple:
        product_part, version_part = parts

        product_part = re.sub(r' |/|--+', '-', re.sub(r'[^0-9a-z\-_~+/\. ]', '', product_part.lower()).strip())
        version_part = re.sub(r' |/|--+', '-', re.sub(r'[^0-9a-z\-_~+/\. ]', '', version_part.lower()).strip())
        
        return (product_part, version_part)

    software_list = []
    progress = 0
    for root, subdirs, files in os.walk(os.path.abspath("C:\\")):
        for file in files:
            file_ext = file.split('.')[-1].lower()
            if file_ext != 'exe' and file_ext != 'dll':
                continue

            fpath = os.path.join(root, file)
            parsed = parse_info(fpath)
            if not parsed:
                continue

            parsed = format(parsed)

            if not len(parsed[0]) or not len(parsed[1]) or parsed in software_list:
                continue

            software_list.append(parsed)
            #print(parsed)
            progress += 1
            print(f'Found {progress} unique software executables', end='\r')
        
    return software_list
                

def get_supported_os() -> set:
    return {'Windows:*'}

def get_required_packages() -> set:
    return {'pywin32'}