import csv
import requests
from urllib.error import HTTPError
import csv
import argparse
import subprocess
import re

parser = argparse.ArgumentParser(description='Generate a report of known software vulnerabilities on this system.')
parser.add_argument('-p', '--package', nargs=2)
parser.add_argument('-ap', '--allPackages', action='store_true')
parser.add_argument('-f', '--file')
args = parser.parse_args()
print(args)

ap = args.allPackages
pack = None
version = None
if args.package:
    pack = args.package[0]
    version = args.package[1]
filePath = args.file

softwareList = []
softwareVersionDict = {}

softwareTagBlacklist = [
     '-stable',
     '-common'
]


if ap:
    cmd = 'apt list --installed | tail -n +2'
    processResult = subprocess.run(cmd, shell=True, check=True, text=True, capture_output=True)
    #with open('package.csv', 'w') as f:
    #      f.write(processResult.stdout)
    softwareList = processResult.stdout.split('\n')[:-1]

if pack:
    softwareVersionDict[pack] = version

if filePath:
    try:
        f = open(filePath, 'r')
        softwareList.extend(f.readlines())
        f.close()
    except IOError:
        print('IOError: No such file or directory!')
        exit(1)

for line in softwareList:
    softwarePattern = re.search(r'^[a-z\-\.0-9+]+[/ ]', line)
    versionPattern = re.search(r' \d+[^\s]*\s', line)
    if len(line) == 0:
        continue
    if not softwarePattern:
        print(f'Error: Error parsing software package! Skipping: {line}')
        continue
    if not versionPattern:
        print(f'Error: Error parsing software version! Skipping: {line}')
        continue

    softwareKey = softwarePattern.group()[:-1]
    for flag in softwareTagBlacklist:
         softwareKey = softwareKey.replace(flag, '')
             
    softwareVersionDict[softwareKey] = versionPattern.group().strip()


#print(softwareVersionDict)

with open('report.csv', 'w') as csvFile:
    writer = csv.DictWriter(csvFile, fieldnames=['product', 'version', 'summaries'])
    writer.writeheader()
    for package in softwareVersionDict.keys():
        url = f"http://localhost:5000/api/search-product/{package}/{softwareVersionDict[package]}"
    
        try:
            print(url)
            response = requests.get(url)
            
            if(response.status_code == 200):
                responseJsonDict = response.json()
                if responseJsonDict:
                    if len(responseJsonDict['version']) == 0:
                        continue
                    print(responseJsonDict)
                    writer.writerow(responseJsonDict)
                else:
                    print("Empty response")
        except HTTPError as http_err:
            print("HTTP error: %s" % (http_err))
        except ConnectionError as conn_err:
            print("Connection error: %s" % (conn_err))

    csvFile.close()


